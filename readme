# AI-Enhanced Real-Time Dashboard ‚Äì Backend (Node.js + Express + MongoDB)

Welcome to the **AI-Enhanced MERN Real-Time Dashboard** backend! Built using **Node.js**, **Express**, **MongoDB**, and **Socket.IO**, this service enables:

- **OTP-based authentication**
- **Real-time sensor data simulation & broadcasting**
- **Flowchart saving, loading, and updating**
- **JWT-secured endpoints**
- **AI-assisted logic and architecture**

---

## üõ† Tech Stack

This project uses the following technologies:

- **Node.js** + **Express**: Server-side framework and JavaScript runtime.
- **MongoDB** + **Mongoose**: NoSQL database to store user and flowchart data.
- **Socket.IO**: For real-time communication between server and client.
- **Nodemailer**: To handle OTP-based email verification.
- **JWT**: For secure user authentication and route protection.
- **dotenv**: For environment variable management.
- **AI Tools**: ChatGPT, GitHub Copilot for code generation and suggestions.

---

## üöÄ Features

### üîë Auth API

- **`POST /register`**: Register a new user and send OTP to the provided email.
- **`POST /register/:otp`**: Verify OTP sent to the user‚Äôs email and complete registration.
- **`POST /login`**: Log in a user using email and password.
- **`GET /fetch/profile`**: Retrieve the logged-in user's profile (JWT protected).

### üì° Data API

  > The sensor emits random values every 1-2 seconds via **Socket.IO**.

### ‚öôÔ∏è Flow API

- **`POST /flow/save`**: Save flowchart (nodes and edges) data to MongoDB.
- **`GET /flow/load`**: Load the saved flowchart from the database.

---

## üõ† Installation

### Step 1: Clone the Repository & Navigate to the Server Directory

```bash
git clone https://github.com/your-username/ai-dashboard.git
cd ai-dashboard/server

---------------------------------------------------------------
ü§ñ AI Contributions
Several components of the system were scaffolded with AI-assisted tools:

OTP Logic & Email Handling: Generated via ChatGPT for faster development.

Socket.IO Real-time Broadcast: Crafted with prompts from GitHub Copilot.

CRUD APIs for Flow Editor: Initially generated using ChatGPT, then manually refined for production use.

Security Middleware: Auth routes secured with JWT using AI-assisted templates.


Demo Flow
User Sign-Up: User signs up and receives an OTP email.

OTP Verification: User verifies OTP ‚Üí Logs in ‚Üí Receives JWT token.

Real-Time Data: The real-time sensor simulation begins.

Socket.IO: React client listens and displays data via Socket.IO.

Flowchart Editing: User creates or updates flowcharts, which are saved in MongoDB.

Flow Saved: The flowchart data (nodes & edges) is securely stored in the database


-------------------------------------------------------------------------------------
üìú API Documentation
Auth API
POST /register
Summary: Registers a new user and sends an OTP to the provided email.

Request Body:

email (string): User's email.

password (string): User's password.

Responses:

200 OK: OTP sent successfully.

400 Bad Request: User already exists.

POST /register/:otp
Summary: Verifies the OTP sent to the user's email and completes registration.

Request Parameters:

otp (string): OTP to be verified.

Responses:

200 OK: User registered successfully.

400 Bad Request: Invalid or expired OTP.

POST /login
Summary: Logs in the user using email and password.

Request Body:

email (string): User's email.

password (string): User's password.

Responses:

200 OK: JWT token returned on successful login.

400 Bad Request: Invalid credentials.

GET /fetch/profile
Summary: Fetches the logged-in user's profile.

Headers:

Authorization: Bearer <JWT> (JWT token in the Authorization header)

Responses:

200 OK: User profile returned successfully.

401 Unauthorized: Token is missing or invalid.

Data API
POST /api/data/start
Summary: Starts the real-time sensor data simulation.

Responses:

200 OK: Sensor simulation started.

400 Bad Request: Simulation already running.

POST /api/data/stop
Summary: Stops the real-time sensor data simulation.

Responses:

200 OK: Sensor simulation stopped.

400 Bad Request: Simulation is not running.

Flow API
POST /flow/save
Summary: Saves the flowchart (nodes & edges).

Request Body:

nodes (array): List of nodes in the flowchart.

edges (array): List of edges in the flowchart.

Responses:

200 OK: Flowchart saved successfully.

400 Bad Request: Invalid data provided.

GET /flow/load
Summary: Loads the saved flowchart.

Responses:

200 OK: Flowchart loaded successfully.

404 Not Found: No flowchart foun